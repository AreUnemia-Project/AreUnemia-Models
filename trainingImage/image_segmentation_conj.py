# -*- coding: utf-8 -*-
"""image-segmentation-conj

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11H5bIsqC5uhG5nsWM4HKEYHzkYs8a2ai
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
import warnings
from ultralytics import YOLO
import cv2
from PIL import Image
import yaml
import random

sns.set(rc={'axes.facecolor': '#ffe4de'}, style='darkgrid')

dataDir = '/content/Conjunctiva-Segmentation'

trainImagePath = os.path.join(dataDir, 'train', 'images')

imagesFiles = [f for f in os.listdir(trainImagePath) if f.endswith('.jpg')]

randomImages = random.sample(imagesFiles, 15)

plt.figure(figsize=(10, 10))

for i, image_file in enumerate(randomImages):
  image_path = os.path.join(trainImagePath, image_file)
  image = Image.open(image_path)
  plt.subplot(3, 5, i + 1)
  plt.imshow(image)
  plt.axis('off')

plt.suptitle('Random Selection of Dataset Images', fontsize = 24)

plt.tight_layout()
plt.show

model = YOLO('yolov8n-seg.pt')

yamlFilePath = os.path.join(dataDir, 'data.yaml')

results = model.train(
    data = yamlFilePath,
    epochs = 30,
    imgsz = 640,
    batch = 32,
    optimizer = 'auto',
    lr0 = 0.0001,
    lrf = 0.01,
    dropout = 0.25,
    device = 0,
    seed = 42
)

bestModelpath = '/content/runs/segment/train/weights/best.pt'
bestModel = YOLO(bestModelpath)

validImagePath = os.path.join(dataDir, 'valid', 'images')

imageFiles = [f for f in os.listdir(validImagePath) if f.endswith('.jpg')]

numImages = len(imageFiles)
selectedImage = [imageFiles[i] for i in range(0, numImages, numImages // 9)]

fig, axes = plt.subplots(3, 3, figsize=(10, 10))
fig.suptitle('Validation Set Inferences')

for i, ax in enumerate(axes.flatten()):
  imagePath = os.path.join(validImagePath, selectedImage[i])
  results = bestModel.predict(source = imagePath, imgsz=640)
  annotatedImage = results[0].plot()
  annotatedImageRGB = cv2.cvtColor(annotatedImage, cv2.COLOR_BGR2RGB)
  ax.imshow(annotatedImageRGB)
  ax.axis('off')

plt.tight_layout()
plt.show()

imagePath = '/content/example1.jpg'

fig, ax = plt.subplots(1, 1, figsize=(10, 10))
fig.suptitle('Validation Set Inferences')

# Ensure the image exists at the given path
assert os.path.exists(imagePath), f"Image not found at {imagePath}"

# Predict and plot
results = bestModel.predict(source=imagePath, imgsz=640)

# Debugging: Print the results to check what is returned
# print(results)

# Display the image
ax.imshow(annotatedImageRGB)
ax.axis('off')

plt.tight_layout()
plt.show()

